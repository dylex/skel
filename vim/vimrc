set   autoindent
set   backspace=2
set nobackup
set   backupskip=/tmp/*,/var/tmp/*
set   belloff=cursor,wildmode
"set   cindent
set   cinkeys-=0#
set   cpoptions-=s
set   diffopt=filler,iwhite,vertical
set noequalalways
"set equalprg=indent
set   fileformats=unix,dos,mac
set   foldmethod=indent
set   foldlevelstart=63
set   formatoptions=rq
set nohlsearch
set   ignorecase
set   incsearch
"set   langmap=tjjtnkksslln
set   laststatus=2
if $OSTYPE =~? 'freebsd'
set   makeprg=gmake
endif
set   matchpairs+=<:>
set   modeline
set   mouse=a
set   number
set   ruler
set   scrolloff=5
set   selection=exclusive
set   shiftwidth=2
set   showcmd
set   showmatch
set   sidescroll=1
set   softtabstop=-1
set   smartcase
"set   smartindent
if has('spell')
set   spelllang=en_us
endif
set   splitright
set nostartofline
set   statusline=%2n\ %f%=%<\ %(%Y%W%H%R%M%)\ \ %P\ %10(%c%V%),%-6l\ %7o=%02B
set   suffixes-=.h
set   switchbuf=useopen,usetab
set   tabstop=8
set   textwidth=0
set   timeoutlen=2000
set   ttimeoutlen=100
if has('persistent_undo')
set   undodir=$HOME/tmp/.vimundo,$HOME/.vimundo
set   undofile
au BufWritePre /tmp/* setl noundofile
au BufWritePre /var/tmp/* setl noundofile
endif
set   viminfo='12,h,%,n~/.vim/viminfo
set   whichwrap=b,s,<,>,[,]
set   wildignore+=*.o
set   wildmode=longest,list
set   wrap

if $QWERTY == ""
no t j
no n k
no s l
no - t
no j +
no k -
no l n
no t j
no n k
no s l
no j n
no k t
no l s
no T J
no N K
no S L
no K T
endif

map!  <BS>
map!  <BS>
map Y y$
map ZW :up<CR>
nmap q: :q
nmap Q :confirm q<CR>
let mapleader = ""
nmap <Leader>p :set paste<CR>
nmap <Leader>u :set nopaste<CR>
nmap <Leader>m :up<CR>:make<CR>

try
	call pathogen#infect()
catch /E117/
endtry

let netrw_list_hide='^\.'
let netrw_http_cmd="curl -o"

if has('spell')
	nmap <Leader>/ :set spell<CR>
	nmap <Leader>c :set nospell<CR>
	"nmap <Leader>n normal ]s
	"nmap <Leader>r normal [s
	"nmap <Leader>- normal z=
	"nmap <Leader>, normal zg
else
	let spell_language_list = "en_US"
	let spell_executable = "aspell"
	let spell_options = "-W 2"
	let spell_auto_type = ""
	nmap <silent> <unique>          <Leader>/ <Plug>SpellCheck
	nmap <silent> <unique>          <Leader>- <Plug>SpellProposeAlternatives
	let spell_exit_map =            "\<Leader>c"
	let spell_next_error_map =      "\<Leader>n"
	let spell_previous_error_map =  "\<Leader>r"
	let spell_ignore_map =          "\<Leader>."
	let spell_accept_map =          "\<Leader>,"
	let spell_case_accept_map =     "\<Leader>'"
endif

nmap \l :call LineUpPrevWord()<CR>
nmap \r :call LineUpNextWord()<CR>

com -range=% StripTrailing <line1>,<line2>s:\s\+$::
nmap \s :StripTrailing<CR>
vmap \s :StripTrailing<CR>

nmap <Leader>2 :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>
nmap \* :execute "lvimgrep /\\<" . expand("<cword>") . "\\>/j **" <Bar> bot lw<CR>

fun TabsSetup ()
	setl sw=0
endfun

fun OCamlSetup ()
	setl errorformat+=%-Gocaml%m,%AFile\ \"%f\"\\,\ line\ %l\\,\ characters\ %c-%*\\d:,%-Zmake:\ ***\ [%f]\ Error\ %n\,%C%m
	set   suffixes+=.cmi,.cmo,.cmx
endfun

fun HaskellSetup ()
	setl et
	setl matchpairs-=<:>
	setf haskell
	set   suffixes+=.hi,.dyn_hi,.dyn_o
	if filereadable('dist/setup/setup')
		set makeprg=dist/setup/setup\ build
	elseif filereadable('stack.yaml')
		set makeprg=stack\ build
	elseif filereadable('Setup.hs')
		set makeprg=runhaskell\ Setup.hs\ build
	endif
	setl iskeyword=a-z,A-Z,48-57,_,.,39
endfun

fun TextSetup ()
	setl sw=0
	setl fo+=t
	setl nocindent
	setl nosmartindent
	setl textwidth=78
	setl et
	if has('spell')
		setl spell
	endif
endfun

fun MarkdownSetup ()
	setl nocindent
	if has('spell')
		setl spell
	endif
	setl sw=0
endfun

fun MailSetup ()
	call TextSetup()
	if match(getline(2), '^To: bugs') == 0 && match(getline(5), '^Subject: .*\[Bug') == 0
		5s/^Subject: .*\(\[Bug \d*\]\).*/Subject: \1/
	endif
endfun

fun TexSetup ()
	setl nocindent
	setl matchpairs+=`:'
	if has('spell')
		setl spell
	endif
	setl sw=8
	set   suffixes+=.aux,.log,.dvi,.ps,.pdf
endfun

fun CSetup ()
	setl cindent
	setl smartindent
	setl sw=8
endfun

fun MatlabSetup ()
	setl sw=4
	setl et
endfun

fun M4Setup ()
	setl matchpairs+=`:'
endfun

fun PythonSetup ()
	setl sw=4
	setl et
endfun

fun HtmlSetup ()
	setl nocindent
	setl indentkeys=
	nmap <buffer> <Leader>J :call SwitchExt("e", ".js", ".coffee")<CR>
	nmap <buffer> <Leader>C :call SwitchExt("e", ".css", ".styl")<CR>
endfun

fun JSSetup ()
	setl et
	nmap <buffer> <Leader>H :call SwitchExt("e", ".html")<CR>
	nmap <buffer> <Leader>C :call SwitchExt("e", ".css", ".styl")<CR>
endfun

filetype indent plugin on

autocmd BufNewFile,BufRead *.ml* call OCamlSetup()
autocmd BufNewFile,BufRead *.hs* call HaskellSetup()
autocmd BufNewFile,BufRead DOC call TextSetup()
autocmd! filetypedetect BufNewFile,BufRead *.md setf markdown
autocmd! filetypedetect BufNewFile,BufRead *.r,*.R setf r
autocmd! filetypedetect BufNewFile,BufRead *.hsc setf chaskell
autocmd! filetypedetect BufNewFile,BufRead *.gnuplot setf gnuplot
autocmd FileType mail call MailSetup()
autocmd FileType tex call TexSetup()
autocmd FileType c,cpp,rpcgen call CSetup()
autocmd FileType *m4 call M4Setup()
autocmd FileType matlab call MatlabSetup()
autocmd FileType python call PythonSetup()
autocmd FileType markdown call MarkdownSetup()
autocmd FileType mp setl indentkeys= " metapost indenting sucks
autocmd FileType cabal setl et
autocmd FileType gitcommit setl spell
autocmd FileType html call HtmlSetup()
autocmd FileType javascript,coffee,typescript call JSSetup()
autocmd FileType sql,vim,sh,make call TabsSetup()
autocmd BufReadPost * exe "normal `\""

if $TERM =~ '^\(screen\.\)\?\(screen\|x?tmux\|[dm]\?rxvt\|xterm-xfree86\|connectbot\)\(-256color\)\?$'
	set t_Co=256
endif
if $TERM =~ '^screen\|tmux$'
	set t_SI=[5\ q
	set t_EI=[\ q
endif

syntax on
colorscheme my

if filereadable($MYVIMRC . ".local")
	source $MYVIMRC.local
endif
